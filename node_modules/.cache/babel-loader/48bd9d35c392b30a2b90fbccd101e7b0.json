{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kmeur\\\\Documents\\\\GitHub\\\\TeamPG_IoT_Frontend\\\\src\\\\devices\\\\DevicesForm.tsx\";\nimport React, { useState } from \"react\";\nimport { Card, CardHeader, CardBody, Form, FormGroup, Label, Input, Button, DropdownItem, DropdownMenu, DropdownToggle, Dropdown } from \"reactstrap\";\nimport { useForm, Controller } from \"react-hook-form\";\n//this is where onSubmit is created and gets the data\nexport default function DevicesForm({\n  loading,\n  onCreateDevice\n}) {\n  const {\n    register,\n    errors,\n    control,\n    handleSubmit\n  } = useForm();\n\n  const onSubmit = data => {\n    onCreateDevice(data.name, data.macAdd, data.conName);\n  };\n\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const [options, setOptions] = useState([]);\n\n  const toggle = () => {\n    setDropdownOpen(!dropdownOpen);\n  };\n  /*name is the devices name, id is mac address, required means it must be entered\r\n  before it lets you move on, the handleSubmit forces all buttons to be submit buttons*/\n\n\n  return /*#__PURE__*/React.createElement(Card, {\n    className: \"col-lg-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, \"DEVICE ENROLLEMENT\")), /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: \"device-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }\n  }, \"Device Name:\"), /*#__PURE__*/React.createElement(Controller, {\n    as: Input,\n    name: \"name\",\n    control: control,\n    defaultValue: \"\",\n    placeholder: \"Device Name\",\n    rules: {\n      required: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 21\n    }\n  }), errors.name && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert alert-danger\",\n    role: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 29\n    }\n  }, \"Device Name Required\"), \" is required\"), /*#__PURE__*/React.createElement(Label, {\n    for: \"device-macAdd\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }\n  }, \"Mac Address:\"), /*#__PURE__*/React.createElement(Controller, {\n    as: Input,\n    name: \"macAdd\",\n    control: control,\n    defaultValue: \"\",\n    placeholder: \"Mac Address\",\n    rules: {\n      required: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }), errors.name && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert alert-danger\",\n    role: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 29\n    }\n  }, \"Mac Address\"), \" is required\"), /*#__PURE__*/React.createElement(Label, {\n    for: \"device-conName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, \"Gateway Connected to:\"), /*#__PURE__*/React.createElement(Controller, {\n    as: Input,\n    name: \"conName\",\n    control: control,\n    defaultValue: \"\",\n    placeholder: \"Gateway Name\",\n    id: \"device-name\",\n    rules: {\n      required: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }), errors.name && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert alert-danger\",\n    role: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 29\n    }\n  }, \"Gateway Name\"), \" is required\")), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"success\",\n    disabled: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, \"Submit\")), /*#__PURE__*/React.createElement(Dropdown, {\n    isOpen: dropdownOpen,\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DropdownToggle, {\n    caret: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 21\n    }\n  }, \"Dropdown\"), /*#__PURE__*/React.createElement(DropdownMenu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }\n  }, names.map(name => {\n    return /*#__PURE__*/React.createElement(DropdownItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 33\n      }\n    }, name.name);\n  })))));\n}","map":{"version":3,"sources":["C:/Users/kmeur/Documents/GitHub/TeamPG_IoT_Frontend/src/devices/DevicesForm.tsx"],"names":["React","useState","Card","CardHeader","CardBody","Form","FormGroup","Label","Input","Button","DropdownItem","DropdownMenu","DropdownToggle","Dropdown","useForm","Controller","DevicesForm","loading","onCreateDevice","register","errors","control","handleSubmit","onSubmit","data","name","macAdd","conName","dropdownOpen","setDropdownOpen","options","setOptions","toggle","required","names","map"],"mappings":";AAAA,OAAOA,KAAP,IAA6BC,QAA7B,QAAsE,OAAtE;AACA,SACIC,IADJ,EAEIC,UAFJ,EAGIC,QAHJ,EAIIC,IAJJ,EAKIC,SALJ,EAMIC,KANJ,EAOIC,KAPJ,EAQIC,MARJ,EASIC,YATJ,EAUIC,YAVJ,EAWIC,cAXJ,EAYIC,QAZJ,QAaO,YAbP;AAcA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,iBAApC;AAgBI;AACA,eAAe,SAASC,WAAT,CAAqB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAArB,EAAiF;AAC5F,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA,OAApB;AAA6BC,IAAAA;AAA7B,MAA8CR,OAAO,EAA3D;;AACA,QAAMS,QAAQ,GAAIC,IAAD,IAAqB;AAClCN,IAAAA,cAAc,CAACM,IAAI,CAACC,IAAN,EAAYD,IAAI,CAACE,MAAjB,EAAyBF,IAAI,CAACG,OAA9B,CAAd;AACP,GAFG;;AAIJ,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkC5B,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAAC6B,OAAD,EAAUC,UAAV,IAAwB9B,QAAQ,CAAC,EAAD,CAAtC;;AAEA,QAAM+B,MAAM,GAAG,MAAM;AAAEH,IAAAA,eAAe,CAAC,CAACD,YAAF,CAAf;AAAgC,GAAvD;AAEA;;;;AAEA,sBAAO,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACH,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,CADG,eAIH,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEN,YAAY,CAACC,QAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAC,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,oBAAC,UAAD;AACG,IAAA,EAAE,EAAEf,KADP;AAEI,IAAA,IAAI,EAAC,MAFT;AAGG,IAAA,OAAO,EAAEa,OAHZ;AAIG,IAAA,YAAY,EAAC,EAJhB;AAKG,IAAA,WAAW,EAAC,aALf;AAMG,IAAA,KAAK,EAAE;AAAEY,MAAAA,QAAQ,EAAE;AAAZ,KANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAUKb,MAAM,CAACK,IAAP,iBACG;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAoC,IAAA,IAAI,EAAC,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,iBAXR,eAcI,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAC,eAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAdJ,eAeI,oBAAC,UAAD;AACI,IAAA,EAAE,EAAEjB,KADR;AAEI,IAAA,IAAI,EAAC,QAFT;AAGI,IAAA,OAAO,EAAEa,OAHb;AAII,IAAA,YAAY,EAAC,EAJjB;AAKI,IAAA,WAAW,EAAC,aALhB;AAMI,IAAA,KAAK,EAAE;AAAEY,MAAAA,QAAQ,EAAE;AAAZ,KANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfJ,EAuBKb,MAAM,CAACK,IAAP,iBACG;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAoC,IAAA,IAAI,EAAC,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,iBAxBR,eA2BI,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAC,gBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BA3BJ,eA4BI,oBAAC,UAAD;AACI,IAAA,EAAE,EAAEjB,KADR;AAEI,IAAA,IAAI,EAAC,SAFT;AAGI,IAAA,OAAO,EAAEa,OAHb;AAII,IAAA,YAAY,EAAC,EAJjB;AAKI,IAAA,WAAW,EAAC,cALhB;AAMI,IAAA,EAAE,EAAC,aANP;AAOI,IAAA,KAAK,EAAE;AAAEY,MAAAA,QAAQ,EAAE;AAAZ,KAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5BJ,EAqCKb,MAAM,CAACK,IAAP,iBACG;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAoC,IAAA,IAAI,EAAC,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,iBAtCR,CADJ,eA2CI,oBAAC,MAAD;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,KAAK,EAAC,SAFV;AAGI,IAAA,QAAQ,EAAER,OAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3CJ,CADJ,eAoDQ,oBAAC,QAAD;AAAU,IAAA,MAAM,EAAEW,YAAlB;AAAgC,IAAA,MAAM,EAAEI,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,cAAD;AAAgB,IAAA,KAAK,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACME,KAAK,CAACC,GAAN,CAAUV,IAAI,IAAG;AAClB,wBAAO,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAeA,IAAI,CAACA,IAApB,CAAP;AACA,GAFC,CADN,CAJJ,CApDR,CAJG,CAAP;AAoEH","sourcesContent":["import React, { ChangeEvent, useState, useEffect, dropDownOpen } from \"react\";\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    Button,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    Dropdown,\r\n} from \"reactstrap\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { Device } from \"./redux/devices-state\"\r\n\r\n    //this is the class for what data is using to store name\r\n    interface FormInput {\r\n        name: string;\r\n        macAdd: string;\r\n        conName: string;\r\n    }\r\n\r\n    //this is where the onCreateDevice is created and varaibles should be added here\r\n    interface DevicesFormProps {\r\n        loading: boolean;\r\n        onCreateDevice: (name: string, macAdd: string, conName: string) => void;\r\n    }\r\n\r\n    //this is where onSubmit is created and gets the data\r\n    export default function DevicesForm({ loading, onCreateDevice }: DevicesFormProps): JSX.Element {\r\n        const { register, errors, control, handleSubmit } = useForm<FormInput>();\r\n        const onSubmit = (data: FormInput) => {\r\n            onCreateDevice(data.name, data.macAdd, data.conName);\r\n    };\r\n\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n    const [options, setOptions] = useState([]);\r\n\r\n    const toggle = () => { setDropdownOpen(!dropdownOpen) }\r\n\r\n    /*name is the devices name, id is mac address, required means it must be entered\r\n    before it lets you move on, the handleSubmit forces all buttons to be submit buttons*/\r\n    return <Card className=\"col-lg-6\">\r\n        <CardHeader>\r\n            <h3 className=\"mb-0\">DEVICE ENROLLEMENT</h3>\r\n        </CardHeader>\r\n        <CardBody>\r\n            <Form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormGroup>\r\n                    <Label for=\"device-name\">Device Name:</Label>\r\n                    <Controller\r\n                       as={Input}\r\n                        name=\"name\"\r\n                       control={control}\r\n                       defaultValue=\"\"\r\n                       placeholder=\"Device Name\"\r\n                       rules={{ required: true }}\r\n                    />\r\n                    {errors.name &&\r\n                        <div className=\"alert alert-danger\" role=\"alert\">\r\n                            <strong>Device Name Required</strong> is required\r\n                                </div>}\r\n                    <Label for=\"device-macAdd\">Mac Address:</Label>\r\n                    <Controller\r\n                        as={Input}\r\n                        name=\"macAdd\"\r\n                        control={control}\r\n                        defaultValue=\"\"\r\n                        placeholder=\"Mac Address\"\r\n                        rules={{ required: true }}\r\n                    />\r\n                    {errors.name &&\r\n                        <div className=\"alert alert-danger\" role=\"alert\">\r\n                            <strong>Mac Address</strong> is required\r\n                                </div>}\r\n                    <Label for=\"device-conName\">Gateway Connected to:</Label>\r\n                    <Controller\r\n                        as={Input}\r\n                        name=\"conName\"\r\n                        control={control}\r\n                        defaultValue=\"\"\r\n                        placeholder=\"Gateway Name\"\r\n                        id=\"device-name\"\r\n                        rules={{ required: true }}\r\n                    />\r\n                    {errors.name &&\r\n                        <div className=\"alert alert-danger\" role=\"alert\">\r\n                            <strong>Gateway Name</strong> is required\r\n                                </div>}\r\n                </FormGroup>\r\n                <Button\r\n                    type=\"submit\"\r\n                    color=\"success\"\r\n                    disabled={loading}\r\n                >\r\n                    Submit\r\n                </Button>\r\n            </Form>\r\n                <Dropdown isOpen={dropdownOpen} toggle={toggle}>\r\n                    <DropdownToggle caret>\r\n                      Dropdown\r\n                     </DropdownToggle>\r\n                    <DropdownMenu>\r\n                         {names.map(name=> {\r\n                         return <DropdownItem>{name.name}</DropdownItem>\r\n                        })}\r\n                     </DropdownMenu>\r\n                </Dropdown>\r\n        </CardBody>\r\n    </Card>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}