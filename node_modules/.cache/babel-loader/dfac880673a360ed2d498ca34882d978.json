{"ast":null,"code":"import axios from \"axios\";\n\nclass DevicesService {\n  constructor(baseUrl) {\n    this.http = void 0;\n    this.http = axios.create({\n      baseURL: baseUrl\n    });\n  }\n\n  async create(name) {\n    await this.http.post(\"/\", {\n      name\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    return await this.devices();\n  }\n\n  async devices() {\n    const result = await this.http.get(\"/\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    const data = result.data;\n\n    if (data === undefined) {\n      return Promise.resolve([]);\n    }\n\n    return data.map(device => {\n      return {\n        id: device.id,\n        name: device.name\n      };\n    });\n  }\n\n}\n\nconst devicesService = new DevicesService(\"http://localhost:8080/devices\");\nexport default devicesService;","map":{"version":3,"sources":["C:/Users/paytn/Documents/GitHub/TeamPG_IoT_Frontend/src/devices/services/devices-service.ts"],"names":["axios","DevicesService","constructor","baseUrl","http","create","baseURL","name","post","headers","Accept","devices","result","get","data","undefined","Promise","resolve","map","device","id","devicesService"],"mappings":"AAAA,OAAOA,KAAP,MAAqC,OAArC;;AAGA,MAAMC,cAAN,CAAqB;AAEjBC,EAAAA,WAAW,CAACC,OAAD,EAAkB;AAAA,SADrBC,IACqB;AACzB,SAAKA,IAAL,GAAYJ,KAAK,CAACK,MAAN,CAAa;AACrBC,MAAAA,OAAO,EAAEH;AADY,KAAb,CAAZ;AAGH;;AAED,QAAME,MAAN,CAAaE,IAAb,EAA+C;AAC3C,UAAM,KAAKH,IAAL,CAAUI,IAAV,CACF,GADE,EAEF;AAAED,MAAAA;AAAF,KAFE,EAGF;AACIE,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAELC,QAAAA,MAAM,EAAE;AAFH;AADb,KAHE,CAAN;AAWA,WAAO,MAAM,KAAKC,OAAL,EAAb;AACH;;AAED,QAAMA,OAAN,GAAmC;AAC/B,UAAMC,MAAM,GAAG,MAAM,KAAKR,IAAL,CAAUS,GAAV,CACjB,GADiB,EAEjB;AACIJ,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAELC,QAAAA,MAAM,EAAE;AAFH;AADb,KAFiB,CAArB;AAUA,UAAMI,IAAI,GAAGF,MAAM,CAACE,IAApB;;AAEA,QAAIA,IAAI,KAAKC,SAAb,EAAwB;AACpB,aAAOC,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAAP;AACH;;AAED,WAAOH,IAAI,CAACI,GAAL,CAAUC,MAAD,IAAiB;AAC7B,aAAO;AACHC,QAAAA,EAAE,EAAED,MAAM,CAACC,EADR;AAEHb,QAAAA,IAAI,EAAEY,MAAM,CAACZ;AAFV,OAAP;AAIH,KALM,CAAP;AAMH;;AA9CgB;;AAkDrB,MAAMc,cAAc,GAAG,IAAIpB,cAAJ,CACnB,+BADmB,CAAvB;AAGA,eAAeoB,cAAf","sourcesContent":["import axios, { AxiosInstance } from \"axios\";\r\nimport { Device } from \"devices/redux/devices-state\";\r\n\r\nclass DevicesService {\r\n    private http: AxiosInstance;\r\n    constructor(baseUrl: string) {\r\n        this.http = axios.create({\r\n            baseURL: baseUrl,\r\n        });\r\n    }\r\n\r\n    async create(name: string,): Promise<Device[]> {\r\n        await this.http.post(\r\n            \"/\",\r\n            { name, },\r\n            {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Accept: \"application/json\",\r\n                },\r\n            }\r\n        );\r\n\r\n        return await this.devices();\r\n    }\r\n\r\n    async devices(): Promise<Device[]> {\r\n        const result = await this.http.get(\r\n            \"/\",\r\n            {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Accept: \"application/json\",\r\n                },\r\n            }\r\n        );\r\n\r\n        const data = result.data;\r\n\r\n        if (data === undefined) {\r\n            return Promise.resolve([]);\r\n        }\r\n\r\n        return data.map((device: any) => {\r\n            return {\r\n                id: device.id,\r\n                name: device.name,\r\n            };\r\n        });\r\n    }\r\n\r\n}\r\n\r\nconst devicesService = new DevicesService(\r\n    \"http://localhost:8080/devices\"\r\n);\r\nexport default devicesService;\r\n"]},"metadata":{},"sourceType":"module"}