{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kmeur\\\\Documents\\\\GitHub\\\\TeamPG_IoT_Frontend\\\\src\\\\devices\\\\Devices.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Container, Row, Col, DropdownItem, DropdownMenu, DropdownToggle, Dropdown } from \"reactstrap\";\nimport { actions as devicesActions } from \"./redux/devices-actions\";\nimport { actions as systemActions } from \"../redux/system-actions\";\nimport DevicesForm from \"./DevicesForm\";\nimport { DevicesTable } from \"./DevicesTable\";\nimport devicesService from \"devices/services/devices-service\";\n\nconst mapState = state => ({\n  loading: state.devices.loading,\n  devices: state.devices.devices\n});\n\nconst mapDispatch = {\n  loadDevices: devicesActions.loadDevices,\n  createDevice: devicesActions.createDevice,\n  notify: systemActions.notify\n};\nconst connector = connect(mapState, mapDispatch);\n\nfunction Devices({\n  loading,\n  devices,\n  createDevice,\n  loadDevices,\n  notify\n}) {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n\n  const toggle = () => {\n    setDropdownOpen(!dropdownOpen);\n  };\n\n  let [myDevices, setMyDevices] = useState([]);\n  useEffect(() => {\n    devicesService.devices().then(devices => {\n      console.log(devices);\n    });\n    loadDevices();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Container, {\n    className: \"mt--6 d-flex justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"justify-content-md-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(DevicesForm, {\n    onCreateDevice: createDevice,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Row, {\n    className: \"mt-5 justify-content-md-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(DevicesTable, {\n    devices: devices,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Dropdown, {\n    isOpen: dropdownOpen,\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(DropdownToggle, {\n    caret: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 29\n    }\n  }, \"Our devices\"), /*#__PURE__*/React.createElement(DropdownMenu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 29\n    }\n  }, devices === null || devices === void 0 ? void 0 : devices.map(device => {\n    return /*#__PURE__*/React.createElement(DropdownItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 44\n      }\n    }, \" \", device.name, \" \");\n  })))))));\n}\n\nexport default connector(Devices);","map":{"version":3,"sources":["C:/Users/kmeur/Documents/GitHub/TeamPG_IoT_Frontend/src/devices/Devices.tsx"],"names":["React","useEffect","useState","connect","Container","Row","Col","DropdownItem","DropdownMenu","DropdownToggle","Dropdown","actions","devicesActions","systemActions","DevicesForm","DevicesTable","devicesService","mapState","state","loading","devices","mapDispatch","loadDevices","createDevice","notify","connector","Devices","dropdownOpen","setDropdownOpen","toggle","myDevices","setMyDevices","then","console","log","map","device","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAAsE,OAAtE;AACA,SAASC,OAAT,QAAwC,aAAxC;AAGA,SACIC,SADJ,EAEIC,GAFJ,EAGIC,GAHJ,EAKIC,YALJ,EAMIC,YANJ,EAOIC,cAPJ,EAQIC,QARJ,QASO,YATP;AAUA,SAASC,OAAO,IAAIC,cAApB,QAA0C,yBAA1C;AACA,SAASD,OAAO,IAAIE,aAApB,QAAyC,yBAAzC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,OAAOC,cAAP,MAA2B,kCAA3B;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,KAAuB;AACpCC,EAAAA,OAAO,EAAED,KAAK,CAACE,OAAN,CAAcD,OADa;AAEpCC,EAAAA,OAAO,EAAEF,KAAK,CAACE,OAAN,CAAcA;AAFa,CAAvB,CAAjB;;AAKA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,WAAW,EAAEV,cAAc,CAACU,WADZ;AAEhBC,EAAAA,YAAY,EAAEX,cAAc,CAACW,YAFb;AAGhBC,EAAAA,MAAM,EAAEX,aAAa,CAACW;AAHN,CAApB;AAMA,MAAMC,SAAS,GAAGtB,OAAO,CAACc,QAAD,EAAWI,WAAX,CAAzB;;AAKA,SAASK,OAAT,CAAiB;AACbP,EAAAA,OADa;AAEbC,EAAAA,OAFa;AAGbG,EAAAA,YAHa;AAIbD,EAAAA,WAJa;AAKbE,EAAAA;AALa,CAAjB,EAMU;AAEN,QAAM,CAACG,YAAD,EAAeC,eAAf,IAAkC1B,QAAQ,CAAC,KAAD,CAAhD;;AAEA,QAAM2B,MAAM,GAAG,MAAM;AAAED,IAAAA,eAAe,CAAC,CAACD,YAAF,CAAf;AAAgC,GAAvD;;AAEA,MAAI,CAACG,SAAD,EAAYC,YAAZ,IAA4B7B,QAAQ,CAAC,EAAD,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,cAAc,CAACI,OAAf,GAAyBY,IAAzB,CAA8BZ,OAAO,IAAI;AAACa,MAAAA,OAAO,CAACC,GAAR,CAAYd,OAAZ;AAAqB,KAA/D;AACAE,IAAAA,WAAW;AACd,GAHQ,EAGN,EAHM,CAAT;AAKA,sBACI,uDACI,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAC,qCAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AAAa,IAAA,cAAc,EAAEC,YAA7B;AAA2C,IAAA,OAAO,EAAEJ,OAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,eAKI,oBAAC,GAAD;AAAK,IAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAEC,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CALJ,eASI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,QAAD;AAAU,IAAA,MAAM,EAAEO,YAAlB;AAAgC,IAAA,MAAM,EAAEE,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,cAAD;AAAgB,IAAA,KAAK,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,eAII,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKT,OADL,aACKA,OADL,uBACKA,OAAO,CAAEe,GAAT,CAAaC,MAAM,IAAG;AACnB,wBAAO,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAgBA,MAAM,CAACC,IAAvB,MAAP;AACH,GAFA,CADL,CAJJ,CADJ,CATJ,CADJ,CADJ,CADJ;AA4BH;;AACD,eAAeZ,SAAS,CAACC,OAAD,CAAxB","sourcesContent":["import React, { useEffect, useState, ChangeEvent, dropDOwnOpen } from \"react\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { RootState } from \"redux/root-reducer\";\r\n\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Table,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    Dropdown,\r\n} from \"reactstrap\";\r\nimport { actions as devicesActions } from \"./redux/devices-actions\";\r\nimport { actions as systemActions } from \"../redux/system-actions\";\r\nimport DevicesForm from \"./DevicesForm\";\r\nimport { DevicesTable } from \"./DevicesTable\";\r\nimport devicesService from \"devices/services/devices-service\";\r\n\r\nconst mapState = (state: RootState) => ({\r\n    loading: state.devices.loading,\r\n    devices: state.devices.devices,\r\n});\r\n\r\nconst mapDispatch = {\r\n    loadDevices: devicesActions.loadDevices,\r\n    createDevice: devicesActions.createDevice,\r\n    notify: systemActions.notify\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux;\r\n\r\nfunction Devices({\r\n    loading,\r\n    devices,\r\n    createDevice,\r\n    loadDevices,\r\n    notify,\r\n}: Props) {\r\n\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n\r\n    const toggle = () => { setDropdownOpen(!dropdownOpen) }\r\n\r\n    let [myDevices, setMyDevices] = useState([]);\r\n\r\n    useEffect(() => {\r\n        devicesService.devices().then(devices => {console.log(devices)});\r\n        loadDevices();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Container className=\"mt--6 d-flex justify-content-center\" >\r\n                <Col >\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <DevicesForm onCreateDevice={createDevice} loading={loading} />\r\n                    </Row>\r\n\r\n                    <Row className=\"mt-5 justify-content-md-center\">\r\n                        <DevicesTable devices={devices} />\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Dropdown isOpen={dropdownOpen} toggle={toggle}>\r\n                            <DropdownToggle caret>\r\n                                Our devices\r\n                            </DropdownToggle>\r\n                            <DropdownMenu>\r\n                                {devices?.map(device=> {\r\n                                    return <DropdownItem> {device.name} </DropdownItem>\r\n                                })}\r\n                            </DropdownMenu>\r\n                        </Dropdown>\r\n                    </Row>\r\n                </Col>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\nexport default connector(Devices);\r\n"]},"metadata":{},"sourceType":"module"}