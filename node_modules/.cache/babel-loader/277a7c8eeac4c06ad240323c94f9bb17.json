{"ast":null,"code":"import { GatewaysActionType } from \"./Gateways-actions\";\nconst initialState = {\n  loading: false,\n  succeed: false\n};\nexport function GatewaysReducer(state = initialState, action) {\n  switch (action.type) {\n    case GatewaysActionType.LOADING:\n      return { ...state,\n        error: undefined,\n        loading: true\n      };\n\n    case GatewaysActionType.FAILED:\n      return { ...state,\n        error: action.error,\n        loading: false\n      };\n\n    case GatewaysActionType.CHANGE_GATEWAYS:\n      return { ...state,\n        Gateways: action.Gateways,\n        loading: false,\n        error: undefined\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/paytn/Documents/GitHub/TeamPG_IoT_Frontend/src/Gateway/redux/Gateways-reducer.ts"],"names":["GatewaysActionType","initialState","loading","succeed","GatewaysReducer","state","action","type","LOADING","error","undefined","FAILED","CHANGE_GATEWAYS","Gateways"],"mappings":"AACA,SAAyBA,kBAAzB,QAAgG,oBAAhG;AAEA,MAAMC,YAA2B,GAAG;AAClCC,EAAAA,OAAO,EAAE,KADyB;AAElCC,EAAAA,OAAO,EAAE;AAFyB,CAApC;AAMA,OAAO,SAASC,eAAT,CACLC,KAAoB,GAAGJ,YADlB,EAELK,MAFK,EAGU;AACf,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,kBAAkB,CAACQ,OAAxB;AACE,aAAO,EACL,GAAGH,KADE;AAELI,QAAAA,KAAK,EAAEC,SAFF;AAGLR,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKF,kBAAkB,CAACW,MAAxB;AACE,aAAO,EACL,GAAGN,KADE;AAELI,QAAAA,KAAK,EAAGH,MAAD,CAAiCG,KAFnC;AAGLP,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF,SAAKF,kBAAkB,CAACY,eAAxB;AACE,aAAO,EACL,GAAGP,KADE;AAELQ,QAAAA,QAAQ,EAAGP,MAAD,CAAkCO,QAFvC;AAILX,QAAAA,OAAO,EAAE,KAJJ;AAKLO,QAAAA,KAAK,EAAEC;AALF,OAAP;;AAOF;AACE,aAAOL,KAAP;AAvBJ;AAyBD","sourcesContent":["import { GatewaysState } from \"./Gateways-state\";\r\nimport { GatewaysAction, GatewaysActionType, GatewaysFailedAction, GatewaysChangedAction } from \"./Gateways-actions\";\r\n\r\nconst initialState: GatewaysState = {\r\n  loading: false,\r\n  succeed: false,\r\n};\r\n\r\n\r\nexport function GatewaysReducer(\r\n  state: GatewaysState = initialState,\r\n  action: GatewaysAction\r\n): GatewaysState {\r\n  switch (action.type) {\r\n    case GatewaysActionType.LOADING:\r\n      return {\r\n        ...state,\r\n        error: undefined,\r\n        loading: true,\r\n      };\r\n    case GatewaysActionType.FAILED:\r\n      return {\r\n        ...state,\r\n        error: (action as GatewaysFailedAction).error,\r\n        loading: false,\r\n      };\r\n\r\n    case GatewaysActionType.CHANGE_GATEWAYS:\r\n      return {\r\n        ...state,\r\n        Gateways: (action as GatewaysChangedAction).Gateways,\r\n\r\n        loading: false,\r\n        error: undefined,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}