{"ast":null,"code":"import GatewaysService from \"Gateway/services/Gateways-service\";\nexport let GatewaysActionType;\n\n(function (GatewaysActionType) {\n  GatewaysActionType[\"LOADING\"] = \"GATEWAYS_LOADING\";\n  GatewaysActionType[\"FAILED\"] = \"GATEWAYS_FAILED\";\n  GatewaysActionType[\"CHANGE_GATEWAYS\"] = \"GATEWAYS_CHANGE_GATEWAYS\";\n})(GatewaysActionType || (GatewaysActionType = {}));\n\nfunction loading() {\n  return {\n    type: GatewaysActionType.LOADING\n  };\n}\n\nfunction failed(error) {\n  return {\n    type: GatewaysActionType.FAILED,\n    error\n  };\n}\n\nfunction changeGateways(Gateways) {\n  return {\n    type: GatewaysActionType.CHANGE_GATEWAYS,\n    Gateways\n  };\n}\n\nconst loadGateways = () => async (dispatch, getState) => {\n  dispatch(loading());\n\n  try {\n    const Gateways = await GatewaysService.Gateways();\n    dispatch(changeGateways(Gateways));\n  } catch (e) {\n    dispatch(failed(e));\n  }\n};\n\nconst createGateways = name => async (dispatch, getState) => {\n  dispatch(loading());\n\n  try {\n    const Gateways = await GatewaysService.create(name);\n    dispatch(changeGateways(Gateways));\n  } catch (e) {\n    dispatch(failed(e));\n  }\n};\n\nexport const actions = {\n  loadGateways,\n  createGateways\n};","map":{"version":3,"sources":["C:/Users/Duncan/Documents/GitHub/TeamPG_IoT_Frontend/src/Gateways/redux/Gateways-actions.ts"],"names":["GatewaysService","GatewaysActionType","loading","type","LOADING","failed","error","FAILED","changeGateways","Gateways","CHANGE_GATEWAYS","loadGateways","dispatch","getState","e","createGateways","name","create","actions"],"mappings":"AAIA,OAAOA,eAAP,MAA4B,mCAA5B;AAGA,WAAYC,kBAAZ;;WAAYA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;GAAAA,kB,KAAAA,kB;;AAsBZ,SAASC,OAAT,GAA0C;AACxC,SAAO;AACLC,IAAAA,IAAI,EAAEF,kBAAkB,CAACG;AADpB,GAAP;AAGD;;AAED,SAASC,MAAT,CAAgBC,KAAhB,EAAkD;AAChD,SAAO;AACLH,IAAAA,IAAI,EAAEF,kBAAkB,CAACM,MADpB;AAELD,IAAAA;AAFK,GAAP;AAID;;AAED,SAASE,cAAT,CAAwBC,QAAxB,EAAqE;AACnE,SAAO;AACLN,IAAAA,IAAI,EAAEF,kBAAkB,CAACS,eADpB;AAELD,IAAAA;AAFK,GAAP;AAID;;AASD,MAAME,YAAY,GAAG,MAA2B,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAC5ED,EAAAA,QAAQ,CAACV,OAAO,EAAR,CAAR;;AAEA,MAAI;AACF,UAAMO,QAAoB,GAAG,MAAMT,eAAe,CAACS,QAAhB,EAAnC;AAEAG,IAAAA,QAAQ,CAACJ,cAAc,CAACC,QAAD,CAAf,CAAR;AACD,GAJD,CAIE,OAAOK,CAAP,EAAU;AACVF,IAAAA,QAAQ,CAACP,MAAM,CAACS,CAAD,CAAP,CAAR;AACD;AACF,CAVD;;AAYA,MAAMC,cAAc,GAClBC,IADqB,IAEG,OAAOJ,QAAP,EAAiBC,QAAjB,KAA8B;AACtDD,EAAAA,QAAQ,CAACV,OAAO,EAAR,CAAR;;AAEA,MAAI;AACF,UAAMO,QAAoB,GAAG,MAAMT,eAAe,CAACiB,MAAhB,CAAuBD,IAAvB,CAAnC;AAEAJ,IAAAA,QAAQ,CAACJ,cAAc,CAACC,QAAD,CAAf,CAAR;AACD,GAJD,CAIE,OAAOK,CAAP,EAAU;AACVF,IAAAA,QAAQ,CAACP,MAAM,CAACS,CAAD,CAAP,CAAR;AACD;AACF,CAZD;;AAeA,OAAO,MAAMI,OAAO,GAAG;AACrBP,EAAAA,YADqB;AAErBI,EAAAA;AAFqB,CAAhB","sourcesContent":["import { Gateways } from \"./Gateways-state\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { RootState } from \"redux/root-reducer\";\r\nimport { Action } from \"redux\";\r\nimport GatewaysService from \"Gateway/services/Gateways-service\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport enum GatewaysActionType {\r\n  LOADING = \"GATEWAYS_LOADING\",\r\n  FAILED = \"GATEWAYS_FAILED\",\r\n  CHANGE_GATEWAYS = \"GATEWAYS_CHANGE_GATEWAYS\",\r\n}\r\n\r\nexport interface GatewaysLoadingAction {\r\n  type: GatewaysActionType.LOADING;\r\n}\r\n\r\nexport interface GatewaysFailedAction {\r\n  type: GatewaysActionType.FAILED;\r\n  error: any;\r\n}\r\n\r\nexport interface GatewaysChangedAction {\r\n  type: GatewaysActionType.CHANGE_GATEWAYS;\r\n  Gateways: Gateways[];\r\n}\r\n\r\nexport type GatewaysAction = GatewaysLoadingAction | GatewaysFailedAction | GatewaysChangedAction;\r\n\r\nfunction loading(): GatewaysLoadingAction {\r\n  return {\r\n    type: GatewaysActionType.LOADING,\r\n  };\r\n}\r\n\r\nfunction failed(error: any): GatewaysFailedAction {\r\n  return {\r\n    type: GatewaysActionType.FAILED,\r\n    error\r\n  };\r\n}\r\n\r\nfunction changeGateways(Gateways: Gateways[]): GatewaysChangedAction {\r\n  return {\r\n    type: GatewaysActionType.CHANGE_GATEWAYS,\r\n    Gateways\r\n  };\r\n}\r\n\r\ntype GatewaysThunkAction = ThunkAction<\r\n  void,\r\n  RootState,\r\n  unknown,\r\n  Action<GatewaysActionType>\r\n>;\r\n\r\nconst loadGateways = (): GatewaysThunkAction => async (dispatch, getState) => {\r\n  dispatch(loading());\r\n\r\n  try {\r\n    const Gateways: Gateways[] = await GatewaysService.Gateways();\r\n\r\n    dispatch(changeGateways(Gateways));\r\n  } catch (e) {\r\n    dispatch(failed(e));\r\n  }\r\n};\r\n\r\nconst createGateways = (\r\n  name: string,\r\n): GatewaysThunkAction => async (dispatch, getState) => {\r\n  dispatch(loading());\r\n\r\n  try {\r\n    const Gateways: Gateways[] = await GatewaysService.create(name);\r\n\r\n    dispatch(changeGateways(Gateways));\r\n  } catch (e) {\r\n    dispatch(failed(e));\r\n  }\r\n};\r\n\r\n\r\nexport const actions = {\r\n  loadGateways,\r\n  createGateways,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}