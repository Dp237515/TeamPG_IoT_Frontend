{"ast":null,"code":"import devicesService from \"devices/services/devices-service\";\nexport let DevicesActionType;\n\n(function (DevicesActionType) {\n  DevicesActionType[\"LOADING\"] = \"DEVICES_LOADING\";\n  DevicesActionType[\"FAILED\"] = \"DEVICES_FAILED\";\n  DevicesActionType[\"CHANGE_DEVICES\"] = \"DEVICES_CHANGE_DEVICES\";\n})(DevicesActionType || (DevicesActionType = {}));\n\nfunction loading() {\n  return {\n    type: DevicesActionType.LOADING\n  };\n}\n\nfunction failed(error) {\n  return {\n    type: DevicesActionType.FAILED,\n    error\n  };\n}\n\nfunction changeDevices(devices) {\n  return {\n    type: DevicesActionType.CHANGE_DEVICES,\n    devices\n  };\n}\n\nconst loadDevices = () => async (dispatch, getState) => {\n  dispatch(loading());\n\n  try {\n    const devices = await devicesService.devices();\n    dispatch(changeDevices(devices));\n  } catch (e) {\n    dispatch(failed(e));\n  }\n};\n\nconst createDevice = name => async (dispatch, getState) => {\n  dispatch(loading());\n\n  try {\n    const devices = await devicesService.create(name);\n    dispatch(changeDevices(devices));\n  } catch (e) {\n    dispatch(failed(e));\n  }\n};\n\nexport const actions = {\n  loadDevices,\n  createDevice\n};","map":{"version":3,"sources":["C:/Users/paytn/Documents/GitHub/TeamPG_IoT_Frontend/src/devices/redux/devices-actions.ts"],"names":["devicesService","DevicesActionType","loading","type","LOADING","failed","error","FAILED","changeDevices","devices","CHANGE_DEVICES","loadDevices","dispatch","getState","e","createDevice","name","create","actions"],"mappings":"AAIA,OAAOA,cAAP,MAA2B,kCAA3B;AAGA,WAAYC,iBAAZ;;WAAYA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;GAAAA,iB,KAAAA,iB;;AAsBZ,SAASC,OAAT,GAAyC;AACvC,SAAO;AACLC,IAAAA,IAAI,EAAEF,iBAAiB,CAACG;AADnB,GAAP;AAGD;;AAED,SAASC,MAAT,CAAgBC,KAAhB,EAAiD;AAC/C,SAAO;AACLH,IAAAA,IAAI,EAAEF,iBAAiB,CAACM,MADnB;AAELD,IAAAA;AAFK,GAAP;AAID;;AAED,SAASE,aAAT,CAAuBC,OAAvB,EAAgE;AAC9D,SAAO;AACLN,IAAAA,IAAI,EAAEF,iBAAiB,CAACS,cADnB;AAELD,IAAAA;AAFK,GAAP;AAID;;AASD,MAAME,WAAW,GAAG,MAA0B,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAC1ED,EAAAA,QAAQ,CAACV,OAAO,EAAR,CAAR;;AAEA,MAAI;AACF,UAAMO,OAAiB,GAAG,MAAMT,cAAc,CAACS,OAAf,EAAhC;AAEAG,IAAAA,QAAQ,CAACJ,aAAa,CAACC,OAAD,CAAd,CAAR;AACD,GAJD,CAIE,OAAOK,CAAP,EAAU;AACVF,IAAAA,QAAQ,CAACP,MAAM,CAACS,CAAD,CAAP,CAAR;AACD;AACF,CAVD;;AAYA,MAAMC,YAAY,GAChBC,IADmB,IAEI,OAAOJ,QAAP,EAAiBC,QAAjB,KAA8B;AACrDD,EAAAA,QAAQ,CAACV,OAAO,EAAR,CAAR;;AAEA,MAAI;AACF,UAAMO,OAAiB,GAAG,MAAMT,cAAc,CAACiB,MAAf,CAAsBD,IAAtB,CAAhC;AAEAJ,IAAAA,QAAQ,CAACJ,aAAa,CAACC,OAAD,CAAd,CAAR;AACD,GAJD,CAIE,OAAOK,CAAP,EAAU;AACVF,IAAAA,QAAQ,CAACP,MAAM,CAACS,CAAD,CAAP,CAAR;AACD;AACF,CAZD;;AAeA,OAAO,MAAMI,OAAO,GAAG;AACrBP,EAAAA,WADqB;AAErBI,EAAAA;AAFqB,CAAhB","sourcesContent":["import { Device } from \"./devices-state\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { RootState } from \"redux/root-reducer\";\r\nimport { Action } from \"redux\";\r\nimport devicesService from \"devices/services/devices-service\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport enum DevicesActionType {\r\n  LOADING = \"DEVICES_LOADING\",\r\n  FAILED = \"DEVICES_FAILED\",\r\n  CHANGE_DEVICES = \"DEVICES_CHANGE_DEVICES\",\r\n}\r\n\r\nexport interface DevicesLoadingAction {\r\n  type: DevicesActionType.LOADING;\r\n}\r\n\r\nexport interface DevicesFailedAction {\r\n  type: DevicesActionType.FAILED;\r\n  error: any;\r\n}\r\n\r\nexport interface DevicesChangedAction {\r\n  type: DevicesActionType.CHANGE_DEVICES;\r\n  devices: Device[];\r\n}\r\n\r\nexport type DevicesAction = DevicesLoadingAction | DevicesFailedAction | DevicesChangedAction;\r\n\r\nfunction loading(): DevicesLoadingAction {\r\n  return {\r\n    type: DevicesActionType.LOADING,\r\n  };\r\n}\r\n\r\nfunction failed(error: any): DevicesFailedAction {\r\n  return {\r\n    type: DevicesActionType.FAILED,\r\n    error\r\n  };\r\n}\r\n\r\nfunction changeDevices(devices: Device[]): DevicesChangedAction {\r\n  return {\r\n    type: DevicesActionType.CHANGE_DEVICES,\r\n    devices\r\n  };\r\n}\r\n\r\ntype DevicesThunkAction = ThunkAction<\r\n  void,\r\n  RootState,\r\n  unknown,\r\n  Action<DevicesActionType>\r\n>;\r\n\r\nconst loadDevices = (): DevicesThunkAction => async (dispatch, getState) => {\r\n  dispatch(loading());\r\n\r\n  try {\r\n    const devices: Device[] = await devicesService.devices();\r\n\r\n    dispatch(changeDevices(devices));\r\n  } catch (e) {\r\n    dispatch(failed(e));\r\n  }\r\n};\r\n\r\nconst createDevice = (\r\n  name: string,\r\n): DevicesThunkAction => async (dispatch, getState) => {\r\n  dispatch(loading());\r\n\r\n  try {\r\n    const devices: Device[] = await devicesService.create(name);\r\n\r\n    dispatch(changeDevices(devices));\r\n  } catch (e) {\r\n    dispatch(failed(e));\r\n  }\r\n};\r\n\r\n\r\nexport const actions = {\r\n  loadDevices,\r\n  createDevice,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}