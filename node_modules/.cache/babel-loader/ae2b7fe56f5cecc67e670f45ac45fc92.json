{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Duncan\\\\Documents\\\\GitHub\\\\TeamPG_IoT_Frontend\\\\src\\\\GlobalView\\\\GlobalView.tsx\";\nimport { Table } from \"reactstrap\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport devicesService from \"GlobalView/services/devices-service\";\nimport gatewaysService from \"GlobalView/services/Gateways-service\";\nexport default function GlobalView() {\n  const [devices, setDevices] = useState([]);\n  const [gateways, setGateways] = useState([]);\n  const [selectedGateway, setSelectedGateway] = useState(null);\n  useEffect(() => {\n    devicesService.devices().then(devices => {\n      setDevices(devices);\n    });\n    gatewaysService.Gateways().then(gateways => {\n      setGateways(gateways);\n    });\n  }, []);\n\n  const handleGateway = name => {\n    setSelectedGateway(name);\n    console.log(name);\n    setDropdownOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    className: \"align-items-center\",\n    responsive: true,\n    hover: true,\n    striped: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    className: \"thead-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    scope: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  }, \"Gateway\"), /*#__PURE__*/React.createElement(\"th\", {\n    scope: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }\n  }, \"Mac Address\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, gateways === null || gateways === void 0 ? void 0 : gateways.map(gateways => {\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: gateways.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      scope: \"row\",\n      onRender: () => handleGateway(gateways.name),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }\n    }, gateways.name, () => handleGateway(gateways.name), console.log(gateways.name)), /*#__PURE__*/React.createElement(\"th\", {\n      scope: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }\n    }, gateways.macAdd), devices === null || devices === void 0 ? void 0 : devices.filter(device => device.conName === selectedGateway).map(device => {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: device.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"th\", {\n        scope: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 29\n        }\n      }, device.name), /*#__PURE__*/React.createElement(\"th\", {\n        scope: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 29\n        }\n      }, device.macAdd));\n    }));\n  }))));\n}","map":{"version":3,"sources":["C:/Users/Duncan/Documents/GitHub/TeamPG_IoT_Frontend/src/GlobalView/GlobalView.tsx"],"names":["Table","React","useState","useEffect","devicesService","gatewaysService","GlobalView","devices","setDevices","gateways","setGateways","selectedGateway","setSelectedGateway","then","Gateways","handleGateway","name","console","log","setDropdownOpen","map","id","macAdd","filter","device","conName"],"mappings":"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","sourcesContent":["import { Table, DropdownItem, DropdownMenu, DropdownToggle, Dropdown, Button } from \"reactstrap\";\r\nimport React, { ChangeEvent, useState, useEffect } from \"react\";\r\nimport \"../App.css\";\r\nimport { actions as devicesActions } from \"devices/redux/devices-actions\";\r\nimport { actions as systemActions } from \"../redux/system-actions\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { RootState } from \"redux/root-reducer\";\r\nimport {gWays} from \"../Gateway/GatewaysForm\";\r\nimport devicesService from \"GlobalView/services/devices-service\";\r\nimport gatewaysService from \"GlobalView/services/Gateways-service\";\r\n\r\nexport default function GlobalView(){\r\n\r\nconst [devices, setDevices] = useState([]);\r\nconst [gateways, setGateways] = useState([]);\r\nconst [selectedGateway, setSelectedGateway] = useState(null);\r\n\r\nuseEffect(() => {\r\n    devicesService.devices().then(devices => {setDevices(devices)});\r\n    gatewaysService.Gateways().then(gateways => {setGateways(gateways)});\r\n}, []);\r\n\r\nconst handleGateway = (name) => {\r\n    setSelectedGateway(name);\r\n    console.log(name);\r\n    setDropdownOpen(false);\r\n}\r\n\r\nreturn <div>\r\n    <Table className=\"align-items-center\" responsive hover striped>\r\n        <thead className=\"thead-light\">\r\n            <tr>\r\n                <th scope=\"col\">Gateway</th>\r\n                <th scope=\"col\">Mac Address</th>\r\n            </tr>\r\n        </thead>\r\n    <tbody>\r\n        {gateways?.map((gateways) => {\r\n            return (\r\n                <tr key={gateways.id} >\r\n\r\n                    <th scope=\"row\" onRender={()=>handleGateway(gateways.name)}>\r\n                        {gateways.name}\r\n                        {()=>handleGateway(gateways.name)}\r\n                        {console.log(gateways.name)}\r\n                    </th>\r\n                    <th scope=\"row\">\r\n                        {gateways.macAdd}\r\n                    </th>\r\n                    {devices?.filter(device=>device.conName===selectedGateway).map((device) => {\r\n                    return (\r\n                        <tr key={device.id}>\r\n                            <th scope=\"row\">\r\n                                {device.name}\r\n                            </th>\r\n                            <th scope=\"row\">\r\n                                {device.macAdd}\r\n                            </th>\r\n                        </tr>\r\n                        );\r\n                    })}\r\n                </tr>\r\n\r\n            );\r\n        })}\r\n\r\n        </tbody>\r\n</Table>\r\n</div>\r\n}"]},"metadata":{},"sourceType":"module"}