{"ast":null,"code":"import axios from \"axios\";\n\nclass GatewaysService {\n  constructor(baseUrl) {\n    this.http = void 0;\n    this.http = axios.create({\n      baseURL: baseUrl\n    });\n  }\n\n  async create(name) {\n    await this.http.post(\"/\", {\n      name\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    return await this.Gateways();\n  }\n\n  async Gateways() {\n    const result = await this.http.get(\"/\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    const data = result.data;\n\n    if (data === undefined) {\n      return Promise.resolve([]);\n    }\n\n    return data.map(Gateways => {\n      return {\n        id: Gateways.id,\n        name: Gateways.name\n      };\n    });\n  }\n\n}\n\nconst gatewaysService = new GatewaysService( //this error solution is\n//https://stackoverflow.com/questions/41944650/this-implicitly-has-type-any-because-it-does-not-have-a-type-annotation\n\"http://localhost:8080/gateways\");\nexport default gatewaysService;","map":{"version":3,"sources":["C:/Users/paytn/Documents/GitHub/TeamPG_IoT_Frontend/src/Gateway/services/Gateways-service.ts"],"names":["axios","GatewaysService","constructor","baseUrl","http","create","baseURL","name","post","headers","Accept","Gateways","result","get","data","undefined","Promise","resolve","map","id","gatewaysService"],"mappings":"AAAA,OAAOA,KAAP,MAAqC,OAArC;;AAGA,MAAMC,eAAN,CAAsB;AAElBC,EAAAA,WAAW,CAACC,OAAD,EAAkB;AAAA,SADrBC,IACqB;AACzB,SAAKA,IAAL,GAAYJ,KAAK,CAACK,MAAN,CAAa;AACrBC,MAAAA,OAAO,EAAEH;AADY,KAAb,CAAZ;AAGH;;AAED,QAAME,MAAN,CAAaE,IAAb,EAAiD;AAC7C,UAAM,KAAKH,IAAL,CAAUI,IAAV,CACF,GADE,EAEF;AAAED,MAAAA;AAAF,KAFE,EAGF;AACIE,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAELC,QAAAA,MAAM,EAAE;AAFH;AADb,KAHE,CAAN;AAWA,WAAO,MAAM,KAAKC,QAAL,EAAb;AACH;;AAED,QAAMA,QAAN,GAAsC;AAClC,UAAMC,MAAM,GAAG,MAAM,KAAKR,IAAL,CAAUS,GAAV,CACjB,GADiB,EAEjB;AACIJ,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAELC,QAAAA,MAAM,EAAE;AAFH;AADb,KAFiB,CAArB;AAUA,UAAMI,IAAI,GAAGF,MAAM,CAACE,IAApB;;AAEA,QAAIA,IAAI,KAAKC,SAAb,EAAwB;AACpB,aAAOC,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAAP;AACH;;AAED,WAAOH,IAAI,CAACI,GAAL,CAAUP,QAAD,IAAmB;AAC/B,aAAO;AACHQ,QAAAA,EAAE,EAAER,QAAQ,CAACQ,EADV;AAEHZ,QAAAA,IAAI,EAAEI,QAAQ,CAACJ;AAFZ,OAAP;AAIH,KALM,CAAP;AAMH;;AA9CiB;;AAkDtB,MAAMa,eAAe,GAAG,IAAInB,eAAJ,EAAoB;AAC5C;AACI,gCAFoB,CAAxB;AAIA,eAAemB,eAAf","sourcesContent":["import axios, { AxiosInstance } from \"axios\";\r\nimport { Gateways } from \"Gateway/redux/Gateways-state\";\r\n\r\nclass GatewaysService {\r\n    private http: AxiosInstance;\r\n    constructor(baseUrl: string) {\r\n        this.http = axios.create({\r\n            baseURL: baseUrl,\r\n        });\r\n    }\r\n\r\n    async create(name: string,): Promise<Gateways[]> {\r\n        await this.http.post(\r\n            \"/\",\r\n            { name, },\r\n            {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Accept: \"application/json\",\r\n                },\r\n            }\r\n        );\r\n\r\n        return await this.Gateways();\r\n    }\r\n\r\n    async Gateways(): Promise<Gateways[]> {\r\n        const result = await this.http.get(\r\n            \"/\",\r\n            {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Accept: \"application/json\",\r\n                },\r\n            }\r\n        );\r\n\r\n        const data = result.data;\r\n\r\n        if (data === undefined) {\r\n            return Promise.resolve([]);\r\n        }\r\n\r\n        return data.map((Gateways: any) => {\r\n            return {\r\n                id: Gateways.id,\r\n                name: Gateways.name,\r\n            };\r\n        });\r\n    }\r\n\r\n}\r\n\r\nconst gatewaysService = new GatewaysService(//this error solution is\r\n//https://stackoverflow.com/questions/41944650/this-implicitly-has-type-any-because-it-does-not-have-a-type-annotation\r\n    \"http://localhost:8080/gateways\"\r\n);\r\nexport default gatewaysService;\r\n"]},"metadata":{},"sourceType":"module"}