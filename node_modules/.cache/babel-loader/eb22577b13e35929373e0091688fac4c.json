{"ast":null,"code":"import axios from \"axios\";\n\nclass DevicesService {\n  constructor(baseUrl) {\n    this.http = void 0;\n    this.async = void 0;\n    this.http = axios.create({\n      baseURL: baseUrl\n    });\n  }\n\n  async create(name, macAdd, conName) {\n    await this.http.post(\"/\", {\n      name,\n      macAdd,\n      conName\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    return await this.devices();\n  }\n\n  async devices() {\n    const result = await this.http.get(\"/getDevices\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    const data = result.data;\n\n    if (data === undefined) {\n      return Promise.resolve([]);\n    }\n    /*this is where it gets all of the info for device*/\n\n\n    return data.map(device => {\n      return {\n        id: device.id,\n        name: device.name,\n        macAdd: device.macAdd,\n        conName: device.conName\n      };\n    });\n  }\n\n}\n\nconst devicesService = new DevicesService(\"http://localhost:8080/devices\");\nexport default devicesService;","map":{"version":3,"sources":["C:/Users/Duncan/Documents/GitHub/TeamPG_IoT_Frontend/src/devices/services/devices-service.ts"],"names":["axios","DevicesService","constructor","baseUrl","http","async","create","baseURL","name","macAdd","conName","post","headers","Accept","devices","result","get","data","undefined","Promise","resolve","map","device","id","devicesService"],"mappings":"AAAA,OAAOA,KAAP,MAAqC,OAArC;;AAGA,MAAMC,cAAN,CAAqB;AAEjBC,EAAAA,WAAW,CAACC,OAAD,EAAkB;AAAA,SADrBC,IACqB;AAAA,SAqB7BC,KArB6B;AACzB,SAAKD,IAAL,GAAYJ,KAAK,CAACM,MAAN,CAAa;AACrBC,MAAAA,OAAO,EAAEJ;AADY,KAAb,CAAZ;AAGH;;AAED,QAAMG,MAAN,CAAaE,IAAb,EAA2BC,MAA3B,EAA2CC,OAA3C,EAA+E;AAC3E,UAAM,KAAKN,IAAL,CAAUO,IAAV,CACF,GADE,EAEF;AAAEH,MAAAA,IAAF;AAAQC,MAAAA,MAAR;AAAgBC,MAAAA;AAAhB,KAFE,EAGF;AACIE,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAELC,QAAAA,MAAM,EAAE;AAFH;AADb,KAHE,CAAN;AAWA,WAAO,MAAM,KAAKC,OAAL,EAAb;AACH;;AAID,QAAMA,OAAN,GAAmC;AAC/B,UAAMC,MAAM,GAAG,MAAM,KAAKX,IAAL,CAAUY,GAAV,CACjB,aADiB,EAEjB;AACIJ,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAELC,QAAAA,MAAM,EAAE;AAFH;AADb,KAFiB,CAArB;AAUA,UAAMI,IAAI,GAAGF,MAAM,CAACE,IAApB;;AAEA,QAAIA,IAAI,KAAKC,SAAb,EAAwB;AACpB,aAAOC,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAAP;AACH;AAED;;;AACA,WAAOH,IAAI,CAACI,GAAL,CAAUC,MAAD,IAAiB;AAC7B,aAAO;AACHC,QAAAA,EAAE,EAAED,MAAM,CAACC,EADR;AAEHf,QAAAA,IAAI,EAAEc,MAAM,CAACd,IAFV;AAGHC,QAAAA,MAAM,EAAEa,MAAM,CAACb,MAHZ;AAIHC,QAAAA,OAAO,EAAEY,MAAM,CAACZ;AAJb,OAAP;AAMH,KAPM,CAAP;AAQH;;AAnDgB;;AAuDrB,MAAMc,cAAc,GAAG,IAAIvB,cAAJ,CACnB,+BADmB,CAAvB;AAGA,eAAeuB,cAAf","sourcesContent":["import axios, { AxiosInstance } from \"axios\";\nimport { Device } from \"devices/redux/devices-state\";\n\nclass DevicesService {\n    private http: AxiosInstance;\n    constructor(baseUrl: string) {\n        this.http = axios.create({\n            baseURL: baseUrl,\n        });\n    }\n\n    async create(name: string, macAdd: string, conName: string): Promise<Device[]> {\n        await this.http.post(\n            \"/\",\n            { name, macAdd, conName},\n            {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\",\n                },\n            }\n        );\n\n        return await this.devices();\n    }\n\n    async \n\n    async devices(): Promise<Device[]> {\n        const result = await this.http.get(\n            \"/getDevices\",\n            {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\",\n                },\n            }\n        );\n\n        const data = result.data;\n\n        if (data === undefined) {\n            return Promise.resolve([]);\n        }\n\n        /*this is where it gets all of the info for device*/\n        return data.map((device: any) => {\n            return {\n                id: device.id,\n                name: device.name,\n                macAdd: device.macAdd,\n                conName: device.conName,\n            };\n        });\n    }\n\n}\n\nconst devicesService = new DevicesService(\n    \"http://localhost:8080/devices\"\n);\nexport default devicesService;\n"]},"metadata":{},"sourceType":"module"}