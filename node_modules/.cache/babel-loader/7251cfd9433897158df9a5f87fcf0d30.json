{"ast":null,"code":"import axios from \"axios\";\n\nclass GatewaysService {\n  constructor(baseUrl) {\n    this.http = void 0;\n    this.http = axios.create({\n      baseURL: baseUrl\n    });\n  }\n\n  async create(name, macAdd, ipAdd) {\n    //console.log(name+ \" \"+ macAdd+ \" \"+ipAdd);\n    await this.http.post(\"/\", {\n      name,\n      macAdd,\n      ipAdd\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    return await this.Gateways();\n  }\n\n  delete(id) {\n    axios.delete(\"http://localhost:3000/gateways/deleteGateways/\" + id);\n    return id;\n  }\n\n  async Gateways() {\n    const result = await this.http.get(\"/getgateways\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    const data = result.data;\n\n    if (data === undefined) {\n      return Promise.resolve([]);\n    }\n\n    return data.map(Gateways => {\n      console.log(Gateways.ipaddress);\n      console.log(Gateways.name);\n      return {\n        id: Gateways.id,\n        name: Gateways.name,\n        macAdd: Gateways.macAdd,\n        ipAdd: Gateways.ipaddress\n      };\n    });\n  }\n\n}\n\nconst gatewaysService = new GatewaysService(\"http://localhost:3000/gateways\");\nexport default gatewaysService;","map":{"version":3,"sources":["C:/Users/Duncan/Documents/GitHub/TeamPG_IoT_Frontend/src/LocalView/services/Gateways-service.ts"],"names":["axios","GatewaysService","constructor","baseUrl","http","create","baseURL","name","macAdd","ipAdd","post","headers","Accept","Gateways","delete","id","result","get","data","undefined","Promise","resolve","map","console","log","ipaddress","gatewaysService"],"mappings":"AAAA,OAAOA,KAAP,MAAqC,OAArC;;AAGA,MAAMC,eAAN,CAAsB;AAElBC,EAAAA,WAAW,CAACC,OAAD,EAAkB;AAAA,SADrBC,IACqB;AACzB,SAAKA,IAAL,GAAYJ,KAAK,CAACK,MAAN,CAAa;AACrBC,MAAAA,OAAO,EAAEH;AADY,KAAb,CAAZ;AAGH;;AAED,QAAME,MAAN,CAAaE,IAAb,EAA2BC,MAA3B,EAA2CC,KAA3C,EAA+E;AAC3E;AACA,UAAM,KAAKL,IAAL,CAAUM,IAAV,CACF,GADE,EAEF;AAAEH,MAAAA,IAAF;AAAQC,MAAAA,MAAR;AAAgBC,MAAAA;AAAhB,KAFE,EAGF;AACIE,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAELC,QAAAA,MAAM,EAAE;AAFH;AADb,KAHE,CAAN;AAWA,WAAO,MAAM,KAAKC,QAAL,EAAb;AACH;;AAEDC,EAAAA,MAAM,CAACC,EAAD,EAAU;AACZf,IAAAA,KAAK,CAACc,MAAN,CAAa,mDAAiDC,EAA9D;AACA,WAAOA,EAAP;AACH;;AAED,QAAMF,QAAN,GAAsC;AAClC,UAAMG,MAAM,GAAG,MAAM,KAAKZ,IAAL,CAAUa,GAAV,CACjB,cADiB,EAEjB;AACIN,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAELC,QAAAA,MAAM,EAAE;AAFH;AADb,KAFiB,CAArB;AAUA,UAAMM,IAAI,GAAGF,MAAM,CAACE,IAApB;;AAEA,QAAIA,IAAI,KAAKC,SAAb,EAAwB;AACpB,aAAOC,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAAP;AACH;;AAED,WAAOH,IAAI,CAACI,GAAL,CAAUT,QAAD,IAAmB;AAChCU,MAAAA,OAAO,CAACC,GAAR,CAAYX,QAAQ,CAACY,SAArB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYX,QAAQ,CAACN,IAArB;AACC,aAAO;AACHQ,QAAAA,EAAE,EAAEF,QAAQ,CAACE,EADV;AAEHR,QAAAA,IAAI,EAAEM,QAAQ,CAACN,IAFZ;AAGHC,QAAAA,MAAM,EAAEK,QAAQ,CAACL,MAHd;AAIHC,QAAAA,KAAK,EAAEI,QAAQ,CAACY;AAJb,OAAP;AAMH,KATM,CAAP;AAUH;;AAxDiB;;AA4DtB,MAAMC,eAAe,GAAG,IAAIzB,eAAJ,CACpB,gCADoB,CAAxB;AAGA,eAAeyB,eAAf","sourcesContent":["import axios, { AxiosInstance } from \"axios\";\r\nimport { Gateways } from \"LocalView/redux/Gateways-state\";\r\n\r\nclass GatewaysService {\r\n    private http: AxiosInstance;\r\n    constructor(baseUrl: string) {\r\n        this.http = axios.create({\r\n            baseURL: baseUrl,\r\n        });\r\n    }\r\n\r\n    async create(name: string, macAdd: string, ipAdd: string): Promise<Gateways[]> {\r\n        //console.log(name+ \" \"+ macAdd+ \" \"+ipAdd);\r\n        await this.http.post(\r\n            \"/\",\r\n            { name, macAdd, ipAdd},\r\n            {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Accept: \"application/json\",\r\n                },\r\n            }\r\n        );\r\n\r\n        return await this.Gateways();\r\n    }\r\n\r\n    delete(id: any) {\r\n        axios.delete(\"http://localhost:3000/gateways/deleteGateways/\"+id);\r\n        return id;\r\n    }\r\n\r\n    async Gateways(): Promise<Gateways[]> {\r\n        const result = await this.http.get(\r\n            \"/getgateways\",\r\n            {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Accept: \"application/json\",\r\n                },\r\n            }\r\n        );\r\n\r\n        const data = result.data;\r\n\r\n        if (data === undefined) {\r\n            return Promise.resolve([]);\r\n        }\r\n\r\n        return data.map((Gateways: any) => {\r\n           console.log(Gateways.ipaddress);\r\n           console.log(Gateways.name);\r\n            return {\r\n                id: Gateways.id,\r\n                name: Gateways.name,\r\n                macAdd: Gateways.macAdd,\r\n                ipAdd: Gateways.ipaddress\r\n            };\r\n        });\r\n    }\r\n\r\n}\r\n\r\nconst gatewaysService = new GatewaysService(\r\n    \"http://localhost:3000/gateways\",\r\n);\r\nexport default gatewaysService;\r\n"]},"metadata":{},"sourceType":"module"}